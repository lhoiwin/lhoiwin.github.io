(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{356:function(s,a,t){"use strict";t.r(a);var _=t(10),e=Object(_.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"老司机也必须掌握的mysql优化指南"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#老司机也必须掌握的mysql优化指南"}},[s._v("#")]),s._v(" 老司机也必须掌握的MySQL优化指南")]),s._v(" "),t("p",[s._v("http://database.51cto.com/art/201810/584617.htm")]),s._v(" "),t("p",[s._v("当MySQL 单表记录数过大时，CRUD性能会急剧下降。")]),s._v(" "),t("h2",{attrs:{id:"单表优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单表优化"}},[s._v("#")]),s._v(" 单表优化")]),s._v(" "),t("p",[s._v("除非单表数据未来会一直不断上涨，否则不要一开始就考虑拆分，拆分会带来逻辑、部署、运维的各种复杂度。")]),s._v(" "),t("p",[s._v("一般以整型值为主的表在千万级以下，字符串为主的表在五百万以下是没有太大问题的。")]),s._v(" "),t("p",[s._v("而事实上很多时候 MySQL 单表的性能依然有不少优化空间，甚至能正常支撑千万级以上的数据量。")]),s._v(" "),t("h3",{attrs:{id:"字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字段"}},[s._v("#")]),s._v(" 字段")]),s._v(" "),t("ul",[t("li",[s._v("尽量使用 TINYINT、SMALLINT、MEDIUM_INT 作为整数类型而非 INT ，如果非负则加上 UNSIGNED")]),s._v(" "),t("li",[s._v("VARCHAR 的长度只分配真正需要的空间")]),s._v(" "),t("li",[s._v("使用枚举或整数代替字符串类型")]),s._v(" "),t("li",[s._v("尽量使用 TIMESTAMP 而非 DATATIME")]),s._v(" "),t("li",[s._v("单表不要太多字段，建议在 20 个以内")]),s._v(" "),t("li",[s._v("避免使用 NULL 字段，很难查询优化并且占用额外索引空间")]),s._v(" "),t("li",[s._v("用整型来存 IP (https://blog.csdn.net/mengzuchao/article/details/78226502)")])]),s._v(" "),t("h3",{attrs:{id:"索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[s._v("#")]),s._v(" 索引")]),s._v(" "),t("ul",[t("li",[s._v("索引不是越多越好，根据查询的针对性来创建，优先考虑在 WHERE 和 ORDER BY 命令上涉及的列建立索引，可以根据 EXPLAIN 来查看是否用了索引还是全表扫描")]),s._v(" "),t("li",[s._v("尽量避免在 WHERE 子句中对字段进行 NULL 值判断，否则将导致引擎放弃使用索引而进行全表扫描")]),s._v(" "),t("li",[s._v("值分布很稀少的字段不适合建索引， 例如 ‘性别’这种")]),s._v(" "),t("li",[s._v("字符字段只建前缀索引(https://blog.csdn.net/A_Runner/article/details/80207543)")]),s._v(" "),t("li",[s._v("字符字段最好不要做主键")]),s._v(" "),t("li",[s._v("不用外键，由程序保证约束")]),s._v(" "),t("li",[s._v("尽量不用 UNIQUE , 由程序保证约束")]),s._v(" "),t("li",[s._v("使用多索引时注意顺序和查询条件保持一致，同时删除不必要的单列索引")])]),s._v(" "),t("h3",{attrs:{id:"查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询"}},[s._v("#")]),s._v(" 查询")]),s._v(" "),t("ul",[t("li",[s._v("可通过开起慢查询日志找出比较慢的SQL")]),s._v(" "),t("li",[s._v("不做列运算： SELECT id WHERE age+1 = 10 , 任何对列的操作都将导致表扫描，它包括数据库教程函数、计算表达式等等，查询时尽量将操作移到等号右边")]),s._v(" "),t("li",[s._v("SQL语句尽可能简单")]),s._v(" "),t("li",[s._v("不用 select *")]),s._v(" "),t("li",[s._v("OR 改写成 IN ：OR 的效率是 n 级别，IN 的效率是 log（n） 级别， IN 的个数建议控制在 200 以内")]),s._v(" "),t("li",[s._v("不用函数和触发器，在程序实现")]),s._v(" "),t("li",[s._v("避免 %xxx 式查询")]),s._v(" "),t("li",[s._v("少用 JOIN")]),s._v(" "),t("li",[s._v("使用同类型进行比较， 比如 '123'和'123', 123 和 123 比")]),s._v(" "),t("li",[s._v("尽量避免在 WHERE 子句中使用 != 或 <> 操作符，否则引擎将放弃使用索引而进行全表扫描")]),s._v(" "),t("li",[s._v("对于连续数值，使用 BETWEEN 不用 IN：SELECT id FROM t WHERE num BETWEEN 1 AND 5")]),s._v(" "),t("li",[s._v("列表数据不要拿全表，要使用 LIMIT 来分页，每页数量也不要太大")])]),s._v(" "),t("h3",{attrs:{id:"引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引擎"}},[s._v("#")]),s._v(" 引擎")]),s._v(" "),t("p",[s._v("目前广泛使用的是 MyISAM 和 InnoDB 两种引擎")]),s._v(" "),t("h3",{attrs:{id:"myisam"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#myisam"}},[s._v("#")]),s._v(" MyISAM")]),s._v(" "),t("p",[s._v("MyISAM 引擎是 MySQL 5.1 及之前版本的默认引擎，它的特点是：")]),s._v(" "),t("ul",[t("li",[s._v("支持行锁，读取时对需要读到的所有表加锁，写入时则对表加排它锁")]),s._v(" "),t("li",[s._v("不支持事务")]),s._v(" "),t("li",[s._v("不支持外键")]),s._v(" "),t("li",[s._v("不支持崩溃后的安全恢复")]),s._v(" "),t("li",[s._v("在表有读取查询的同时，支持往表中插入新纪录")]),s._v(" "),t("li",[s._v("支持 BLOB 和 TEXT 的前 500 个字符索引，支持全文索引")]),s._v(" "),t("li",[s._v("支持延迟更新索引，极大提升写入性能")]),s._v(" "),t("li",[s._v("对于不会进行修改的表，支持压缩表，极大减少磁盘空间占用")])]),s._v(" "),t("h3",{attrs:{id:"innodb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#innodb"}},[s._v("#")]),s._v(" InnoDB")]),s._v(" "),t("p",[s._v("InnoDB 在 MySQL 5.5 后成为默认索引，它的特点是：")]),s._v(" "),t("ul",[t("li",[s._v("支持行锁，采用 MVCC 来支持高并发")]),s._v(" "),t("li",[s._v("支持事务")]),s._v(" "),t("li",[s._v("支持外键")]),s._v(" "),t("li",[s._v("支持崩溃后的安全恢复")]),s._v(" "),t("li",[s._v("不支持全文索引")])]),s._v(" "),t("p",[s._v("PS：据说 InnoDB 已经在 MySQL 5.6.4 支持全文索引了。")]),s._v(" "),t("p",[s._v("总体来讲，"),t("strong",[s._v("MyISAM 适合 SELECT 密集型的表，而 InnoDB 适合 INSERT 和 UPDATE 密集型的表")])]),s._v(" "),t("h3",{attrs:{id:"系统调优参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统调优参数"}},[s._v("#")]),s._v(" 系统调优参数")]),s._v(" "),t("p",[s._v("可以使用下面几个工具来做基准测试：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("sysbench")]),s._v("：一个模块化，跨平台以及多线程的性能测试工具")])]),s._v(" "),t("p",[s._v("https://github.com/akopytov/sysbench")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("iibench-mysql")]),s._v("：基于 Java 的 MySQL / Percona / MariaDB 索引进行插入性能测试工具")])]),s._v(" "),t("p",[s._v("https://github.com/tmcallaghan/iibench-mysql")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("tpcc-mysql")]),s._v("：Percona 开发的 TPC-C 测试工具")]),s._v(" "),t("li")]),s._v(" "),t("p",[s._v("https://github.com/Percona-Lab/tpcc-mysql")]),s._v(" "),t("p",[s._v("调优参数内容较多，具体可参考官方文档，这里介绍一些比较重要的参数：")]),s._v(" "),t("ul",[t("li",[s._v("back_log：back_log 值可以指出在 MySQL 暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。")])]),s._v(" "),t("p",[s._v("也就是说，如果 MySQL 的连接数据达到 max_connections 时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即 back_log，如果等待连接的数量超过 back_log，将不被授予连接资源。可以从默认的 50 升至 500。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("wait_timeout：数据库连接闲置时间，闲置连接会占用内存资源。可以从默认的 8 小时减到半小时。")])]),s._v(" "),t("li",[t("p",[s._v("max_user_connection：最大连接数，默认为 0 无上限，最好设一个合理上限。")])]),s._v(" "),t("li",[t("p",[s._v("thread_concurrency：并发线程数，设为 CPU 核数的两倍。")])]),s._v(" "),t("li",[t("p",[s._v("skip_name_resolve：禁止对外部连接进行 DNS 解析，消除 DNS 解析时间，但需要所有远程主机用 IP 访问。")])]),s._v(" "),t("li",[t("p",[s._v("key_buffer_size：索引块的缓存大小，增加会提升索引处理速度，对 MyISAM 表性能影响最大。\n对于内存 4G 左右，可设为 256M 或 384M，通过查询 show status like 'key_read%'，保证 key_reads / - - - key_read_requests 在 0.1% 以下最好。")])]),s._v(" "),t("li",[t("p",[s._v("innodb_buffer_pool_size：缓存数据块和索引块，对 InnoDB 表性能影响最大。\n通过查询 show status like 'Innodb_buffer_pool_read%'，保证 (Innodb_buffer_pool_read_requests – - - - Innodb_buffer_pool_reads) / Innodb_buffer_pool_read_requests 越高越好。")])]),s._v(" "),t("li",[t("p",[s._v("innodb_additional_mem_pool_size：InnoDB 存储引擎用来存放数据字典信息以及一些内部数据结构的内存空间大小。")])])]),s._v(" "),t("p",[s._v("当数据库对象非常多的时候，适当调整该参数的大小以确保所有数据都能存放在内存中提高访问效率，当过小的时候，MySQL 会记录 Warning 信息到数据库的错误日志中，这时就需要调整这个参数大小。")]),s._v(" "),t("ul",[t("li",[s._v("innodb_log_buffer_size：InnoDB 存储引擎的事务日志所使用的缓冲区，一般来说不建议超过 32MB。")]),s._v(" "),t("li",[s._v("query_cache_size：缓存 MySQL 中的 ResultSet，也就是一条 SQL 语句执行的结果集，所以仅仅只能针对 Select 语句。")])]),s._v(" "),t("p",[s._v("当某个表的数据有任何变化，都会导致所有引用了该表的 Select 语句在 Query Cache 中的缓存数据失效。\n所以，当我们数据变化非常频繁的情况下，使用 Query Cache 可能得不偿失。\n根据命中率(Qcache_hits/(Qcache_hits+Qcache_inserts)*100))进行调整，一般不建议太大，256MB 可能已经差不多了，大型的配置型静态数据可适当调大。可以通过命令 show status like 'Qcache_%' 查看目前系统 Query Cache 使用大小。")]),s._v(" "),t("ul",[t("li",[s._v("read_buffer_size：MySQL 读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL 会为它分配一段内存缓冲区。")])]),s._v(" "),t("p",[s._v("如果对表的顺序扫描请求非常频繁，可以通过增加该变量值以及内存缓冲区大小提高其性能。")]),s._v(" "),t("ul",[t("li",[s._v("sort_buffer_size：MySQL 执行排序使用的缓冲大小。如果想要增加 ORDER BY 的速度，首先看是否可以让 MySQL 使用索引而不是额外的排序阶段。如果不能，可以尝试增加 sort_buffer_size 变量的大小。\nread_rnd_buffer_size：MySQL 的随机读缓冲区大小。当按任意顺序读取行时(例如按照排序顺序)，将分配一个随机读缓存区。\n进行排序查询时，MySQL 会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。")])]),s._v(" "),t("p",[s._v("但 MySQL 会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。")]),s._v(" "),t("ul",[t("li",[s._v("record_buffer：每个进行一个顺序扫描的线程为其扫描的每张表分配这个大小的一个缓冲区。如果你做很多顺序扫描，可能想要增加该值。")]),s._v(" "),t("li",[s._v("thread_cache_size：保存当前没有与连接关联但是准备为后面新的连接服务的线程，可以快速响应连接的线程请求而无需创建新的。")]),s._v(" "),t("li",[s._v("table_cache：类似于 thread_cache _size，但用来缓存表文件，对 InnoDB 效果不大，主要用于 MyISAM。")])]),s._v(" "),t("h3",{attrs:{id:"升级硬件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升级硬件"}},[s._v("#")]),s._v(" 升级硬件")]),s._v(" "),t("p",[s._v("Scale Up，这个不多说了，根据 MySQL 是 CPU 密集型还是 I/O 密集型，通过提升 CPU 和内存、使用 SSD，都能显著提升 MySQL 性能。")]),s._v(" "),t("h3",{attrs:{id:"读写分离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#读写分离"}},[s._v("#")]),s._v(" 读写分离")]),s._v(" "),t("p",[s._v("也是目前常用的优化，从库读主库写，一般不要采用双主或多主引入很多复杂性，尽量采用文中的其他方案来提高性能。同时目前很多拆分的解决方案同时也兼顾考虑了读写分离。")]),s._v(" "),t("h3",{attrs:{id:"缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[s._v("#")]),s._v(" 缓存")]),s._v(" "),t("p",[s._v("缓存可以发生在这些层次：")]),s._v(" "),t("ul",[t("li",[s._v("MySQL 内部：在系统调优参数介绍了相关设置。")]),s._v(" "),t("li",[s._v("数据访问层：比如 MyBatis 针对 SQL 语句做缓存，而 Hibernate 可以精确到单个记录，这里缓存的对象主要是持久化对象 Persistence Object。")]),s._v(" "),t("li",[s._v("应用服务层：可以通过编程手段对缓存做到更精准的控制和更多的实现策略，这里缓存的对象是数据传输对象 Data Transfer Object。")]),s._v(" "),t("li",[s._v("Web 层：针对 Web 页面做缓存。")]),s._v(" "),t("li",[s._v("浏览器客户端：用户端的缓存。")])]),s._v(" "),t("p",[s._v("可以根据实际情况在一个层次或多个层次结合加入缓存。这里重点介绍下服务层的缓存实现。")]),s._v(" "),t("p",[s._v("目前主要有两种方式：")]),s._v(" "),t("ul",[t("li",[s._v("直写式(Write Through)：在数据写入数据库后，同时更新缓存，维持数据库与缓存的一致性")])]),s._v(" "),t("p",[s._v("这也是当前大多数应用缓存框架如 Spring Cache 的工作方式。这种实现非常简单，同步好，但效率一般")]),s._v(" "),t("ul",[t("li",[s._v("回写式(Write Back)：当有数据要写入数据库时，只会更新缓存，然后异步批量的将缓存数据同步到数据库上")])]),s._v(" "),t("p",[s._v("这种实现比较复杂，需要较多的应用逻辑，同时可能会产生数据库与缓存的不同步，但效率非常高")]),s._v(" "),t("h3",{attrs:{id:"表分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表分区"}},[s._v("#")]),s._v(" 表分区")]),s._v(" "),t("p",[s._v("MySQL 在 5.1 版引入的分区是一种简单的水平拆分，用户需要在建表的时候加上分区参数，对应用是透明的无需修改代码")]),s._v(" "),t("p",[s._v("对用户来说，分区表是一个独立的逻辑表，但是底层由多个物理子表组成，实现分区的代码实际上是通过对一组底层表的对象封装，但对 SQL 层来说是一个完全封装底层的黑盒子")]),s._v(" "),t("p",[s._v("MySQL 实现分区的方式也意味着索引也是按照分区的子表定义，没有全局索引")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/47a209a8799e417a022e8744a80b86eb/xmlnote/0763D41DFB4B46809CE9AA561D67219E/8595",alt:"image"}})]),s._v(" "),t("p",[s._v("用户的 SQL 语句是需要针对分区表做优化，SQL 条件中要带上分区条件的列，从而使查询定位到少量的分区上，否则就会扫描全部分区。")]),s._v(" "),t("p",[s._v("可以通过 EXPLAIN PARTITIONS 来查看某条 SQL 语句会落在那些分区上，从而进行 SQL 优化。")]),s._v(" "),t("p",[s._v("如下图 5 条记录落在两个分区上：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v("mysql"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explain")]),s._v(" partitions "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("count")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" user_partition "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+ ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" id "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" select_type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" partitions "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" possible_keys "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("key")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" key_len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" ref  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Extra                    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+ ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SIMPLE")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" user_partition "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" p1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("p4      "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" range "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("Using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("index")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----+-------------+----------------+------------+-------+---------------+---------+---------+------+------+--------------------------+ ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("row")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("分区的好处是：")]),s._v(" "),t("ul",[t("li",[s._v("可以让单表存储更多的数据。")]),s._v(" "),t("li",[s._v("分区表的数据更容易维护，可以通清除整个分区批量删除大量数据，也可以增加新的分区来支持新插入的数据。另外，还可以对一个独立分区进行优化、检查、修复等操作。")]),s._v(" "),t("li",[s._v("部分查询能够从查询条件确定只落在少数分区上，速度会很快。")]),s._v(" "),t("li",[s._v("分区表的数据还可以分布在不同的物理设备上，从而高效利用多个硬件设备。")]),s._v(" "),t("li",[s._v("可以使用分区表来避免某些特殊瓶颈，例如 InnoDB 单个索引的互斥访问、 ext3 文件系统的 inode 锁竞争。")]),s._v(" "),t("li",[s._v("可以备份和恢复单个分区。")])]),s._v(" "),t("p",[s._v("分区的限制和缺点：")]),s._v(" "),t("ul",[t("li",[s._v("一个表最多只能有 1024 个分区。")]),s._v(" "),t("li",[s._v("如果分区字段中有主键或者唯一索引的列，那么所有主键列和唯一索引列都必须包含进来。")]),s._v(" "),t("li",[s._v("分区表无法使用外键约束。")]),s._v(" "),t("li",[s._v("NULL 值会使分区过滤无效。")]),s._v(" "),t("li",[s._v("所有分区必须使用相同的存储引擎。")])]),s._v(" "),t("p",[s._v("分区的类型：")]),s._v(" "),t("ul",[t("li",[s._v("RANGE 分区：基于属于一个给定连续区间的列值，把多行分配给分区。")]),s._v(" "),t("li",[s._v("LIST 分区：类似于按 RANGE 分区，区别在于 LIST 分区是基于列值匹配一个离散值集合中的某个值来进行选择。")]),s._v(" "),t("li",[s._v("HASH 分区：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含 MySQL 中有效的、产生非负整数值的任何表达式。")]),s._v(" "),t("li",[s._v("KEY 分区：类似于按 HASH 分区，区别在于 KEY 分区只支持计算一列或多列，且 MySQL 服务器提供其自身的哈希函数。必须有一列或多列包含整数值。")])]),s._v(" "),t("p",[s._v("分区适合的场景有：最适合的场景数据的时间序列性比较强，则可以按时间来分区。")]),s._v(" "),t("p",[s._v("如下所示：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" members "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" \n    firstname "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    lastname "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    username "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    email "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("35")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    joined "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" RANGE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("YEAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("joined"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" p0 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" LESS THAN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1960")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" p1 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" LESS THAN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1970")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" p2 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" LESS THAN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1980")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" p3 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" LESS THAN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1990")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" p4 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" LESS THAN MAXVALUE \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("查询时加上时间范围条件的效率会非常高，同时对于不需要的历史数据能很容易的批量删除。")]),s._v(" "),t("p",[s._v("如果数据有明显的热点，而且除了这部分数据，其他数据很少被访问到，那么可以将热点数据单独放在一个分区，让这个分区的数据能够有机会都缓存在内存中，查询时只访问一个很小的分区表，能够有效使用索引和缓存。")]),s._v(" "),t("p",[s._v("另外 MySQL 有一种早期的简单的分区实现 - 合并表(merge table)，限制较多且缺乏优化，不建议使用，应该用新的分区机制来替代。")]),s._v(" "),t("h3",{attrs:{id:"垂直拆分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垂直拆分"}},[s._v("#")]),s._v(" 垂直拆分")]),s._v(" "),t("p",[s._v("垂直分库是根据数据库里面的数据表的相关性进行拆分，比如：一个数据库里面既存在用户数据，又存在订单数据，那么垂直拆分可以把用户数据放到用户库、把订单数据放到订单库。")]),s._v(" "),t("p",[s._v("垂直分表是对数据表进行垂直拆分的一种方式，常见的是把一个多字段的大表按常用字段和非常用字段进行拆分，每个表里面的数据记录数一般情况下是相同的，只是字段不一样，使用主键关联。")]),s._v(" "),t("p",[s._v("比如原始的用户表是：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/47a209a8799e417a022e8744a80b86eb/xmlnote/F06FB9DDDB2F45B7A2593A044366F1F5/8597",alt:"image"}})]),s._v(" "),t("p",[s._v("垂直拆分后是：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/47a209a8799e417a022e8744a80b86eb/xmlnote/DC2D92B5BF144E62A3ED92C1371BA8D9/8599",alt:"image"}})]),s._v(" "),t("p",[s._v("垂直拆分的优点是：")]),s._v(" "),t("ul",[t("li",[s._v("可以使得行数据变小，一个数据块(Block)就能存放更多的数据，在查询时就会减少 I/O 次数(每次查询时读取的 Block 就少)。")]),s._v(" "),t("li",[s._v("可以达到最大化利用 Cache 的目的，具体在垂直拆分的时候可以将不常变的字段放一起，将经常改变的放一起。")]),s._v(" "),t("li",[s._v("数据维护简单。")]),s._v(" "),t("li")]),s._v(" "),t("p",[s._v("缺点是：")]),s._v(" "),t("ul",[t("li",[s._v("主键出现冗余，需要管理冗余列。")]),s._v(" "),t("li",[s._v("会引起表连接 JOIN 操作(增加 CPU 开销)可以通过在业务服务器上进行 JOIN 来减少数据库压力。")]),s._v(" "),t("li",[s._v("依然存在单表数据量过大的问题(需要水平拆分)。")]),s._v(" "),t("li",[s._v("事务处理复杂。")])]),s._v(" "),t("h3",{attrs:{id:"水平拆分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#水平拆分"}},[s._v("#")]),s._v(" 水平拆分")]),s._v(" "),t("p",[s._v("水平拆分是通过某种策略将数据分片来存储，分库内分表和分库两部分，每片数据会分散到不同的 MySQL 表或库，以达到分布式的效果，能够支持非常大的数据量。前面的表分区本质上也是一种特殊的库内分表。")]),s._v(" "),t("p",[s._v("库内分表，由于没有把表的数据分布到不同的机器上，仅仅是单纯的解决了单一表数据过大的问题。")]),s._v(" "),t("p",[s._v("因此对于减轻 MySQL 服务器的压力来说，并没有太大的作用，大家还是竞争同一个物理机上的 IO、CPU、网络，这个就要通过分库来解决。")]),s._v(" "),t("p",[s._v("前面垂直拆分的用户表如果进行水平拆分，结果是：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/47a209a8799e417a022e8744a80b86eb/xmlnote/5EA2F3C778724240AB610559EB2D3150/8601",alt:"image"}})]),s._v(" "),t("p",[s._v("实际情况中往往会是垂直拆分和水平拆分的结合，即将 Users_A_M 和 Users_N_Z 再拆成 Users 和 UserExtras，这样一共四张表。")]),s._v(" "),t("p",[s._v("水平拆分的优点是：")]),s._v(" "),t("ul",[t("li",[s._v("不存在单库大数据和高并发的性能瓶颈。")]),s._v(" "),t("li",[s._v("应用端改造较少。")]),s._v(" "),t("li",[s._v("提高了系统的稳定性和负载能力。")])]),s._v(" "),t("p",[s._v("缺点是：")]),s._v(" "),t("ul",[t("li",[s._v("分片事务一致性难以解决。")]),s._v(" "),t("li",[s._v("跨节点 JOIN 性能差，逻辑复杂。")]),s._v(" "),t("li",[s._v("数据多次扩展难度跟维护量极大。")]),s._v(" "),t("li")]),s._v(" "),t("h4",{attrs:{id:"分片原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分片原则"}},[s._v("#")]),s._v(" 分片原则")]),s._v(" "),t("p",[s._v("分片原则如下：")]),s._v(" "),t("ul",[t("li",[s._v("能不分就不分，参考单表优化。")]),s._v(" "),t("li",[s._v("分片数量尽量少，分片尽量均匀分布在多个数据结点上，因为一个查询 SQL跨分片越多，则总体性能越差，虽然要好于所有数据在一个分片的结果，只在必要的时候进行扩容，增加分片数量。")]),s._v(" "),t("li",[s._v("分片规则需要慎重选择做好提前规划，分片规则的选择，需要考虑数据的增长模式，数据的访问模式，分片关联性问题，以及分片扩容问题。")]),s._v(" "),t("li",[s._v("最近的分片策略为范围分片，枚举分片，一致性 Hash 分片，这几种分片都有利于扩容。")]),s._v(" "),t("li",[s._v("尽量不要在一个事务中的 SQL 跨越多个分片，分布式事务一直是个不好处理的问题。")]),s._v(" "),t("li",[s._v("查询条件尽量优化，尽量避免 Select * 的方式，大量数据结果集下，会消耗大量带宽和 CPU 资源，查询尽量避免返回大量结果集，并且尽量为频繁使用的查询语句建立索引。")]),s._v(" "),t("li",[s._v("通过数据冗余和表分区来降低跨库 JOIN 的可能。")])]),s._v(" "),t("p",[s._v("这里特别强调一下分片规则的选择问题，如果某个表的数据有明显的时间特征，比如订单、交易记录等。")]),s._v(" "),t("p",[s._v("他们通常比较合适用时间范围分片，因为具有时效性的数据，我们往往关注其近期的数据，查询条件中往往带有时间字段进行过滤。")]),s._v(" "),t("p",[s._v("比较好的方案是，当前活跃的数据，采用跨度比较短的时间段进行分片，而历史性的数据，则采用比较长的跨度存储。")]),s._v(" "),t("p",[s._v("总体上来说，分片的选择是取决于最频繁的查询 SQL 的条件，因为不带任何 Where 语句的查询 SQL，会遍历所有的分片，性能相对最差，因此这种 SQL 越多，对系统的影响越大，所以我们要尽量避免这种 SQL 的产生。")]),s._v(" "),t("h3",{attrs:{id:"解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[s._v("#")]),s._v(" 解决方案")]),s._v(" "),t("p",[s._v("由于水平拆分牵涉的逻辑比较复杂，当前也有了不少比较成熟的解决方案。这些方案分为两大类：客户端架构和代理架构。")]),s._v(" "),t("h4",{attrs:{id:"客户端架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户端架构"}},[s._v("#")]),s._v(" 客户端架构")]),s._v(" "),t("p",[s._v("通过修改数据访问层，如 JDBC、Data Source、MyBatis，通过配置来管理多个数据源，直连数据库，并在模块内完成数据的分片整合，一般以 Jar 包的方式呈现。")]),s._v(" "),t("p",[s._v("这是一个客户端架构的例子：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/47a209a8799e417a022e8744a80b86eb/xmlnote/27E0A74D65164705B8C70BD68D0746F4/8603",alt:"image"}})]),s._v(" "),t("p",[s._v("可以看到分片的实现是和应用服务器在一起的，通过修改 Spring JDBC 层来实现。")]),s._v(" "),t("p",[s._v("客户端架构的优点是：")]),s._v(" "),t("ul",[t("li",[s._v("应用直连数据库，降低外围系统依赖所带来的宕机风险。")]),s._v(" "),t("li",[s._v("集成成本低，无需额外运维的组件。")])]),s._v(" "),t("p",[s._v("缺点是：")]),s._v(" "),t("ul",[t("li",[s._v("限于只能在数据库访问层上做文章，扩展性一般，对于比较复杂的系统可能会力不从心。")]),s._v(" "),t("li",[s._v("将分片逻辑的压力放在应用服务器上，造成额外风险。")])]),s._v(" "),t("h4",{attrs:{id:"代理架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代理架构"}},[s._v("#")]),s._v(" 代理架构")]),s._v(" "),t("p",[s._v("通过独立的中间件来统一管理所有数据源和数据分片整合，后端数据库集群对前端应用程序透明，需要独立部署和运维代理组件。")]),s._v(" "),t("p",[s._v("这是一个代理架构的例子：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/47a209a8799e417a022e8744a80b86eb/xmlnote/CD487DB728A34F0DBDA2294627F9D6F3/8605",alt:"image"}})]),s._v(" "),t("p",[s._v("代理组件为了分流和防止单点，一般以集群形式存在，同时可能需要 ZooKeeper 之类的服务组件来管理。")]),s._v(" "),t("p",[s._v("代理架构的优点是：")]),s._v(" "),t("ul",[t("li",[s._v("能够处理非常复杂的需求，不受数据库访问层原来实现的限制，扩展性强。")]),s._v(" "),t("li",[s._v("对于应用服务器透明且没有增加任何额外负载。")])]),s._v(" "),t("p",[s._v("缺点是：")]),s._v(" "),t("ul",[t("li",[s._v("需部署和运维独立的代理中间件，成本高。")]),s._v(" "),t("li",[s._v("应用需经过代理来连接数据库，网络上多了一跳，性能有损失且有额外风险")])]),s._v(" "),t("h4",{attrs:{id:"各方案比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各方案比较"}},[s._v("#")]),s._v(" 各方案比较")]),s._v(" "),t("p",[s._v("目前来说，业界还是有很多的方案可供选择，但应该如何进行选择?我认为，可以按以下思路来考虑：")]),s._v(" "),t("ul",[t("li",[s._v("确定是使用客户端架构还是代理架构。中小型规模或是比较简单的场景倾向于选择客户端架构，复杂场景或大规模系统倾向选择代理架构。")]),s._v(" "),t("li",[s._v("具体功能是否满足，比如需要跨节点 ORDER BY，那么支持该功能的优先考虑。")]),s._v(" "),t("li",[s._v("不考虑一年内没有更新的产品，说明开发停滞，甚至无人维护和技术支持。")]),s._v(" "),t("li",[s._v("最好按大公司→社区→小公司→个人这样的出品方顺序来选择。")]),s._v(" "),t("li",[s._v("选择口碑较好的，比如 Github 星数、使用者数量质量和使用者反馈。")]),s._v(" "),t("li",[s._v("开源的优先，往往项目有特殊需求可能需要改动源代码。")])]),s._v(" "),t("p",[s._v("按照上述思路，推荐以下选择：")]),s._v(" "),t("ul",[t("li",[s._v("客户端架构：ShardingJDBC")]),s._v(" "),t("li",[s._v("代理架构：MyCat 或者 Atlas")])]),s._v(" "),t("h3",{attrs:{id:"兼容-mysql-且可水平扩展的数据库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#兼容-mysql-且可水平扩展的数据库"}},[s._v("#")]),s._v(" 兼容 MySQL 且可水平扩展的数据库")]),s._v(" "),t("p",[s._v("目前也有一些开源数据库兼容 MySQL 协议，如：")]),s._v(" "),t("ul",[t("li",[s._v("TiDB")]),s._v(" "),t("li",[s._v("Cubrid")])]),s._v(" "),t("p",[s._v("但其工业品质和 MySQL 尚有差距，且需要较大的运维投入，如果想将原始的 MySQL 迁移到可水平扩展的新数据库中，可以考虑一些云数据库：")]),s._v(" "),t("ul",[t("li",[s._v("阿里云 PetaData")]),s._v(" "),t("li",[s._v("阿里云 OceanBase")]),s._v(" "),t("li",[s._v("腾讯云 DCDB")])]),s._v(" "),t("h3",{attrs:{id:"nosql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nosql"}},[s._v("#")]),s._v(" NoSQL")]),s._v(" "),t("p",[s._v("在 MySQL 上做 Sharding 是一种戴着镣铐的跳舞，事实上很多大表本身对 MySQL 这种 RDBMS 的需求并不大，并不要求 ACID。")]),s._v(" "),t("p",[s._v("可以考虑将这些表迁移到 NoSQL，彻底解决水平扩展问题，例如：")]),s._v(" "),t("p",[s._v("日志类、监控类、统计类数据\n非结构化或弱结构化数据\n对事务要求不强，且无太多关联操作的数据\n参考资料：")]),s._v(" "),t("p",[s._v("Mysql那点事\nMysql策略\nMySQL：MySQL 5.6 Reference Manual")])])}),[],!1,null,null,null);a.default=e.exports}}]);