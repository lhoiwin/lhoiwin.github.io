(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{352:function(e,s,n){"use strict";n.r(s);var t=n(10),a=Object(t.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"redis"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[e._v("#")]),e._v(" Redis")]),e._v(" "),n("p",[e._v("Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。")]),e._v(" "),n("p",[e._v("Redis 与其他 key - value 缓存产品有以下三个特点：")]),e._v(" "),n("ul",[n("li",[e._v("支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。")]),e._v(" "),n("li",[e._v("不仅仅支持简单的key-value类型的数据，同时提供list，set，zset，hash等数据结构")]),e._v(" "),n("li",[e._v("支持数据的备份，即master-slave模式的数据备份。")]),e._v(" "),n("li",[e._v("还支持 publish/subscribe, 通知, key 过期等等特性")])]),e._v(" "),n("h2",{attrs:{id:"安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),n("p",[e._v("Windows")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("https://github.com/MicrosoftArchive/redis/releases\n")])])]),n("p",[e._v("Linux")]),e._v(" "),n("p",[e._v("官网下载编译")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("http://redis.io/download\n")])])]),n("p",[e._v("使用gcc make 编译")]),e._v(" "),n("h2",{attrs:{id:"配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),n("p",[e._v("Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。")]),e._v(" "),n("p",[e._v("你可以通过 CONFIG 命令查看或设置配置项。")]),e._v(" "),n("h2",{attrs:{id:"数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[e._v("#")]),e._v(" 数据类型")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("String")])]),e._v(" "),n("li",[n("p",[e._v("Hash")]),e._v(" "),n("ul",[n("li",[e._v("键值对集合")]),e._v(" "),n("li",[e._v("特别适合存储对象")])])]),e._v(" "),n("li",[n("p",[e._v("List")]),e._v(" "),n("ul",[n("li",[e._v("简单的字符串列表")]),e._v(" "),n("li",[e._v("可以添加一个元素到列表的头部（左边）或者尾部（右边）")])])]),e._v(" "),n("li",[n("p",[e._v("set")]),e._v(" "),n("ul",[n("li",[e._v("String类型的无序集合")])])]),e._v(" "),n("li",[n("p",[e._v("zset")]),e._v(" "),n("ul",[n("li",[e._v("有序的set集合")]),e._v(" "),n("li",[e._v("每个元素都会关联一个double类型的分数")]),e._v(" "),n("li",[e._v("redis通过分数来从小到大的排序")]),e._v(" "),n("li",[e._v("zset成员唯一, 但是分数(score)可以重复")])])])]),e._v(" "),n("h2",{attrs:{id:"redis-命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-命令"}},[e._v("#")]),e._v(" Redis 命令")]),e._v(" "),n("p",[e._v("自带客户端 redis-cli")]),e._v(" "),n("p",[e._v("直接启动默认连接本地redis")]),e._v(" "),n("p",[e._v("连接远程redis")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("redis-cli -h -p port -a paaword\n")])])]),n("h3",{attrs:{id:"key相关的命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#key相关的命令"}},[e._v("#")]),e._v(" key相关的命令")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("命令")]),e._v(" "),n("th",[e._v("功能")]),e._v(" "),n("th",[e._v("返回")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("SET key value")]),e._v(" "),n("td",[e._v("设置 key 的值 value")]),e._v(" "),n("td",[e._v("返回 OK")])]),e._v(" "),n("tr",[n("td",[e._v("GET key")]),e._v(" "),n("td",[e._v("获取 key 的值")]),e._v(" "),n("td",[e._v("返回 string")])]),e._v(" "),n("tr",[n("td",[e._v("DEL key")]),e._v(" "),n("td",[e._v("删除 名为 key 的键")]),e._v(" "),n("td",[e._v("返回")])])])]),e._v(" "),n("h3",{attrs:{id:"字符串相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符串相关"}},[e._v("#")]),e._v(" 字符串相关")]),e._v(" "),n("p",[e._v("1\tSET key value\n设置指定 key 的值")]),e._v(" "),n("p",[e._v("2\tGET key\n获取指定 key 的值。")]),e._v(" "),n("p",[e._v("3\tGETRANGE key start end\n返回 key 中字符串值的子字符")]),e._v(" "),n("p",[e._v("4\tGETSET key value\n将给定 key 的值设为 value ，并返回 key 的旧值(old value)。")]),e._v(" "),n("p",[e._v("5\tGETBIT key offset\n对 key 所储存的字符串值，获取指定偏移量上的位(bit)。")]),e._v(" "),n("p",[e._v("6\tMGET key1 [key2..]\n获取所有(一个或多个)给定 key 的值。")]),e._v(" "),n("p",[e._v("7\tSETBIT key offset value\n对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。")]),e._v(" "),n("p",[e._v("8\tSETEX key seconds value\n将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。")]),e._v(" "),n("p",[e._v("9\tSETNX key value\n只有在 key 不存在时设置 key 的值。")]),e._v(" "),n("p",[e._v("10\tSETRANGE key offset value\n用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。")]),e._v(" "),n("p",[e._v("11\tSTRLEN key\n返回 key 所储存的字符串值的长度。")]),e._v(" "),n("p",[e._v("12\tMSET key value [key value ...]\n同时设置一个或多个 key-value 对。")]),e._v(" "),n("p",[e._v("13\tMSETNX key value [key value ...]\n同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。")]),e._v(" "),n("p",[e._v("14\tPSETEX key milliseconds value\n这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。")]),e._v(" "),n("p",[e._v("15\tINCR key\n将 key 中储存的数字值增一。")]),e._v(" "),n("p",[e._v("16\tINCRBY key increment\n将 key 所储存的值加上给定的增量值（increment） 。")]),e._v(" "),n("p",[e._v("17\tINCRBYFLOAT key increment\n将 key 所储存的值加上给定的浮点增量值（increment） 。")]),e._v(" "),n("p",[e._v("18\tDECR key\n将 key 中储存的数字值减一。")]),e._v(" "),n("p",[e._v("19\tDECRBY key decrement\nkey 所储存的值减去给定的减量值（decrement） 。")]),e._v(" "),n("p",[e._v("20\tAPPEND key value\n如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。")]),e._v(" "),n("h3",{attrs:{id:"哈希相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#哈希相关"}},[e._v("#")]),e._v(" 哈希相关")]),e._v(" "),n("p",[e._v("注意以H开头")]),e._v(" "),n("h3",{attrs:{id:"列表相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#列表相关"}},[e._v("#")]),e._v(" 列表相关")]),e._v(" "),n("p",[e._v("1\tBLPOP key1 [key2 ] timeout\n移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。")]),e._v(" "),n("p",[e._v("2\tBRPOP key1 [key2 ] timeout\n移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。")]),e._v(" "),n("p",[e._v("3\tBRPOPLPUSH source destination timeout\n从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。")]),e._v(" "),n("p",[e._v("4\tLINDEX key index\n通过索引获取列表中的元素")]),e._v(" "),n("p",[e._v("5\tLINSERT key BEFORE|AFTER pivot value\n在列表的元素前或者后插入元素")]),e._v(" "),n("p",[e._v("6\tLLEN key\n获取列表长度")]),e._v(" "),n("p",[e._v("7\tLPOP key\n移出并获取列表的第一个元素\n8\tLPUSH key value1 [value2]\n将一个或多个值插入到列表头部")]),e._v(" "),n("p",[e._v("9\tLPUSHX key value\n将一个值插入到已存在的列表头部")]),e._v(" "),n("p",[e._v("10\tLRANGE key start stop\n获取列表指定范围内的元素")]),e._v(" "),n("p",[e._v("11\tLREM key count value\n移除列表元素")]),e._v(" "),n("p",[e._v("12\tLSET key index value\n通过索引设置列表元素的值")]),e._v(" "),n("p",[e._v("13\tLTRIM key start stop\n对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。")]),e._v(" "),n("p",[e._v("14\tRPOP key\n移除并获取列表最后一个元素")]),e._v(" "),n("p",[e._v("15\tRPOPLPUSH source destination\n移除列表的最后一个元素，并将该元素添加到另一个列表并返回")]),e._v(" "),n("p",[e._v("16\tRPUSH key value1 [value2]\n在列表中添加一个或多个值")]),e._v(" "),n("p",[e._v("17\tRPUSHX key value\n为已存在的列表添加值")]),e._v(" "),n("h3",{attrs:{id:"set-相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-相关"}},[e._v("#")]),e._v(" Set 相关")]),e._v(" "),n("p",[e._v("1\tSADD key member1 [member2]\n向集合添加一个或多个成员")]),e._v(" "),n("p",[e._v("2\tSCARD key\n获取集合的成员数")]),e._v(" "),n("p",[e._v("3\tSDIFF key1 [key2]\n返回给定所有集合的差集")]),e._v(" "),n("p",[e._v("4\tSDIFFSTORE destination key1 [key2]\n返回给定所有集合的差集并存储在 destination 中")]),e._v(" "),n("p",[e._v("5\tSINTER key1 [key2]\n返回给定所有集合的交集")]),e._v(" "),n("p",[e._v("6\tSINTERSTORE destination key1 [key2]\n返回给定所有集合的交集并存储在 destination 中")]),e._v(" "),n("p",[e._v("7\tSISMEMBER key member\n判断 member 元素是否是集合 key 的成员")]),e._v(" "),n("p",[e._v("8\tSMEMBERS key\n返回集合中的所有成员")]),e._v(" "),n("p",[e._v("9\tSMOVE source destination member\n将 member 元素从 source 集合移动到 destination 集合")]),e._v(" "),n("p",[e._v("10\tSPOP key\n移除并返回集合中的一个随机元素")]),e._v(" "),n("p",[e._v("11\tSRANDMEMBER key [count]\n返回集合中一个或多个随机数")]),e._v(" "),n("p",[e._v("12\tSREM key member1 [member2]\n移除集合中一个或多个成员")]),e._v(" "),n("p",[e._v("13\tSUNION key1 [key2]\n返回所有给定集合的并集")]),e._v(" "),n("p",[e._v("14\tSUNIONSTORE destination key1 [key2]\n所有给定集合的并集存储在 destination 集合中")]),e._v(" "),n("p",[e._v("15\tSSCAN key cursor [MATCH pattern] [COUNT count]\n迭代集合中的元素")]),e._v(" "),n("h3",{attrs:{id:"zset-有序集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#zset-有序集合"}},[e._v("#")]),e._v(" ZSET 有序集合")]),e._v(" "),n("p",[e._v("1\tZADD key score1 member1 [score2 member2]\n向有序集合添加一个或多个成员，或者更新已存在成员的分数")]),e._v(" "),n("p",[e._v("2\tZCARD key\n获取有序集合的成员数")]),e._v(" "),n("p",[e._v("3\tZCOUNT key min max\n计算在有序集合中指定区间分数的成员数")]),e._v(" "),n("p",[e._v("4\tZINCRBY key increment member\n有序集合中对指定成员的分数加上增量 increment")]),e._v(" "),n("p",[e._v("5\tZINTERSTORE destination numkeys key [key ...]\n计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中")]),e._v(" "),n("p",[e._v("6\tZLEXCOUNT key min max\n在有序集合中计算指定字典区间内成员数量")]),e._v(" "),n("p",[e._v("7\tZRANGE key start stop [WITHSCORES]\n通过索引区间返回有序集合成指定区间内的成员")]),e._v(" "),n("p",[e._v("8\tZRANGEBYLEX key min max [LIMIT offset count]\n通过字典区间返回有序集合的成员")]),e._v(" "),n("p",[e._v("9\tZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]\n通过分数返回有序集合指定区间内的成员")]),e._v(" "),n("p",[e._v("10\tZRANK key member\n返回有序集合中指定成员的索引")]),e._v(" "),n("p",[e._v("11\tZREM key member [member ...]\n移除有序集合中的一个或多个成员")]),e._v(" "),n("p",[e._v("12\tZREMRANGEBYLEX key min max\n移除有序集合中给定的字典区间的所有成员")]),e._v(" "),n("p",[e._v("13\tZREMRANGEBYRANK key start stop\n移除有序集合中给定的排名区间的所有成员")]),e._v(" "),n("p",[e._v("14\tZREMRANGEBYSCORE key min max\n移除有序集合中给定的分数区间的所有成员")]),e._v(" "),n("p",[e._v("15\tZREVRANGE key start stop [WITHSCORES]\n返回有序集中指定区间内的成员，通过索引，分数从高到底")]),e._v(" "),n("p",[e._v("16\tZREVRANGEBYSCORE key max min [WITHSCORES]\n返回有序集中指定分数区间内的成员，分数从高到低排序")]),e._v(" "),n("p",[e._v("17\tZREVRANK key member\n返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序")]),e._v(" "),n("p",[e._v("18\tZSCORE key member\n返回有序集中，成员的分数值")]),e._v(" "),n("p",[e._v("19\tZUNIONSTORE destination numkeys key [key ...]\n计算给定的一个或多个有序集的并集，并存储在新的 key 中")]),e._v(" "),n("p",[e._v("20\tZSCAN key cursor [MATCH pattern] [COUNT count]\n迭代有序集合中的元素（包括元素成员和元素分值）")]),e._v(" "),n("h3",{attrs:{id:"数据库相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据库相关"}},[e._v("#")]),e._v(" 数据库相关")]),e._v(" "),n("p",[e._v("select index 选择数据库")]),e._v(" "),n("h2",{attrs:{id:"hyperloglog"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hyperloglog"}},[e._v("#")]),e._v(" HyperLogLog")]),e._v(" "),n("p",[e._v("Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。")]),e._v(" "),n("p",[e._v("在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。")]),e._v(" "),n("p",[e._v("但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。")]),e._v(" "),n("h3",{attrs:{id:"什么是基数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是基数"}},[e._v("#")]),e._v(" 什么是基数")]),e._v(" "),n("p",[e._v("比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。")]),e._v(" "),n("p",[e._v("1\tPFADD key element [element ...]\n添加指定元素到 HyperLogLog 中。")]),e._v(" "),n("p",[e._v("2\tPFCOUNT key [key ...]\n返回给定 HyperLogLog 的基数估算值。")]),e._v(" "),n("p",[e._v("3\tPFMERGE destkey sourcekey [sourcekey ...]\n将多个 HyperLogLog 合并为一个 HyperLogLog")]),e._v(" "),n("h2",{attrs:{id:"redis-发布订阅"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-发布订阅"}},[e._v("#")]),e._v(" Redis 发布订阅")]),e._v(" "),n("p",[e._v("Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。")]),e._v(" "),n("p",[e._v("Redis 客户端可以订阅任意数量的频道。")]),e._v(" "),n("p",[e._v("下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://www.runoob.com/wp-content/uploads/2014/11/pubsub1.png",alt:"image"}})]),e._v(" "),n("p",[e._v("当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：")]),e._v(" "),n("p",[n("img",{attrs:{src:"http://www.runoob.com/wp-content/uploads/2014/11/pubsub2.png",alt:"image"}})]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('redis 127.0.0.1:6379> SUBSCRIBE redisChat // 接受 redisChat 频道\n\nReading messages... (press Ctrl-C to quit)\n1) "subscribe"\n2) "redisChat"\n3) (integer) 1\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("新redis客户端")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('redis 127.0.0.1:6379> PUBLISH redisChat "Redis is a great" // 向 redisChat频道发送消息\n\n(integer) 1\n\nredis 127.0.0.1:6379> PUBLISH redisChat "Learn redis by runoob.com"\n\n(integer) 1\n\n# 订阅者的客户端会显示如下消息\n1) "message"\n2) "redisChat"\n3) "Redis is a great caching technique"\n1) "message"\n2) "redisChat"\n3) "Learn redis by runoob.com"\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("p",[e._v("1\tPSUBSCRIBE pattern [pattern ...]\n订阅一个或多个符合给定模式的频道。")]),e._v(" "),n("p",[e._v("2\tPUBSUB subcommand [argument [argument ...]]\n查看订阅与发布系统状态。")]),e._v(" "),n("p",[e._v("3\tPUBLISH channel message\n将信息发送到指定的频道。")]),e._v(" "),n("p",[e._v("4\tPUNSUBSCRIBE [pattern [pattern ...]]\n退订所有给定模式的频道。")]),e._v(" "),n("p",[e._v("5\tSUBSCRIBE channel [channel ...]\n订阅给定的一个或多个频道的信息。")]),e._v(" "),n("p",[e._v("6\tUNSUBSCRIBE [channel [channel ...]]\n指退订给定的频道。")]),e._v(" "),n("h2",{attrs:{id:"redis-事务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-事务"}},[e._v("#")]),e._v(" Redis 事务")]),e._v(" "),n("p",[e._v("Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：")]),e._v(" "),n("ul",[n("li",[e._v("批量操作在发送 EXEC 命令前被放入队列缓存。")]),e._v(" "),n("li",[e._v("收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。")]),e._v(" "),n("li",[e._v("在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。")])]),e._v(" "),n("p",[e._v("一个事务从开始到执行会经历以下三个阶段：")]),e._v(" "),n("ul",[n("li",[e._v("开始事务。")]),e._v(" "),n("li",[e._v("命令入队。")]),e._v(" "),n("li",[e._v("执行事务。")])]),e._v(" "),n("p",[e._v("例子:\n以 MULTI 开始一个事务， 然后将多个命令入队到事务中， 最后由 EXEC 命令触发事务， 一并执行事务中的所有命令：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('redis 127.0.0.1:6379> MULTI // 开始事务\nOK\n\nredis 127.0.0.1:6379> SET book-name "Mastering C++ in 21 days" // 把命令加入事务中\nQUEUED\n\nredis 127.0.0.1:6379> GET book-name\nQUEUED\n\nredis 127.0.0.1:6379> SADD tag "C++" "Programming" "Mastering Series"\nQUEUED\n\nredis 127.0.0.1:6379> SMEMBERS tag\nQUEUED\n\nredis 127.0.0.1:6379> EXEC // 执行事务\n1) OK\n2) "Mastering C++ in 21 days"\n3) (integer) 3\n4) 1) "Mastering Series"\n   2) "C++"\n   3) "Programming"\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br")])]),n("p",[e._v("单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。")]),e._v(" "),n("p",[e._v("事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。")]),e._v(" "),n("p",[e._v("1\tDISCARD\n取消事务，放弃执行事务块内的所有命令。")]),e._v(" "),n("p",[e._v("2\tEXEC\n执行所有事务块内的命令。")]),e._v(" "),n("p",[e._v("3\tMULTI\n标记一个事务块的开始。")]),e._v(" "),n("p",[e._v("4\tUNWATCH\n取消 WATCH 命令对所有 key 的监视。")]),e._v(" "),n("p",[e._v("5\tWATCH key [key ...]\n监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。")]),e._v(" "),n("h2",{attrs:{id:"redis-脚本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-脚本"}},[e._v("#")]),e._v(" Redis 脚本")]),e._v(" "),n("p",[e._v("Redis 脚本使用 Lua 解释器来执行脚本。 Reids 2.6 版本通过内嵌支持 Lua 环境。执行脚本的常用命令为 EVAL。")]),e._v(" "),n("p",[e._v("1\tEVAL script numkeys key [key ...] arg [arg ...]\n执行 Lua 脚本。")]),e._v(" "),n("p",[e._v("2\tEVALSHA sha1 numkeys key [key ...] arg [arg ...]\n执行 Lua 脚本。")]),e._v(" "),n("p",[e._v("3\tSCRIPT EXISTS script [script ...]\n查看指定的脚本是否已经被保存在缓存当中。")]),e._v(" "),n("p",[e._v("4\tSCRIPT FLUSH\n从脚本缓存中移除所有脚本。")]),e._v(" "),n("p",[e._v("5\tSCRIPT KILL\n杀死当前正在运行的 Lua 脚本。")]),e._v(" "),n("p",[e._v("6\tSCRIPT LOAD script\n将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。")]),e._v(" "),n("h2",{attrs:{id:"redis-服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-服务器"}},[e._v("#")]),e._v(" Redis 服务器")]),e._v(" "),n("p",[e._v("1\tBGREWRITEAOF\n异步执行一个 AOF（AppendOnly File） 文件重写操作")]),e._v(" "),n("p",[e._v("2\tBGSAVE\n在后台异步保存当前数据库的数据到磁盘")]),e._v(" "),n("p",[e._v("3\tCLIENT KILL [ip:port] [ID client-id]\n关闭客户端连接")]),e._v(" "),n("p",[e._v("4\tCLIENT LIST\n获取连接到服务器的客户端连接列表")]),e._v(" "),n("p",[e._v("5\tCLIENT GETNAME\n获取连接的名称")]),e._v(" "),n("p",[e._v("6\tCLIENT PAUSE timeout\n在指定时间内终止运行来自客户端的命令")]),e._v(" "),n("p",[e._v("7\tCLIENT SETNAME connection-name\n设置当前连接的名称")]),e._v(" "),n("p",[e._v("8\tCLUSTER SLOTS\n获取集群节点的映射数组")]),e._v(" "),n("p",[e._v("9\tCOMMAND\n获取 Redis 命令详情数组")]),e._v(" "),n("p",[e._v("10\tCOMMAND COUNT\n获取 Redis 命令总数")]),e._v(" "),n("p",[e._v("11\tCOMMAND GETKEYS\n获取给定命令的所有键")]),e._v(" "),n("p",[e._v("12\tTIME\n返回当前服务器时间")]),e._v(" "),n("p",[e._v("13\tCOMMAND INFO command-name [command-name ...]\n获取指定 Redis 命令描述的数组")]),e._v(" "),n("p",[e._v("14\tCONFIG GET parameter\n获取指定配置参数的值")]),e._v(" "),n("p",[e._v("15\tCONFIG REWRITE\n对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写")]),e._v(" "),n("p",[e._v("16\tCONFIG SET parameter value\n修改 redis 配置参数，无需重启")]),e._v(" "),n("p",[e._v("17\tCONFIG RESETSTAT\n重置 INFO 命令中的某些统计数据")]),e._v(" "),n("p",[e._v("18\tDBSIZE\n返回当前数据库的 key 的数量")]),e._v(" "),n("p",[e._v("19\tDEBUG OBJECT key\n获取 key 的调试信息")]),e._v(" "),n("p",[e._v("20\tDEBUG SEGFAULT\n让 Redis 服务崩溃")]),e._v(" "),n("p",[e._v("21\tFLUSHALL\n删除所有数据库的所有key")]),e._v(" "),n("p",[e._v("22\tFLUSHDB\n删除当前数据库的所有key")]),e._v(" "),n("p",[e._v("23\tINFO [section]\n获取 Redis 服务器的各种信息和统计数值")]),e._v(" "),n("p",[e._v("24\tLASTSAVE\n返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示")]),e._v(" "),n("p",[e._v("25\tMONITOR\n实时打印出 Redis 服务器接收到的命令，调试用")]),e._v(" "),n("p",[e._v("26\tROLE\n返回主从实例所属的角色")]),e._v(" "),n("p",[e._v("27\tSAVE\n同步保存数据到硬盘")]),e._v(" "),n("p",[e._v("28\tSHUTDOWN [NOSAVE] [SAVE]\n异步保存数据到硬盘，并关闭服务器")]),e._v(" "),n("p",[e._v("29\tSLAVEOF host port\n将当前服务器转变为指定服务器的从属服务器(slave server)")]),e._v(" "),n("p",[e._v("30\tSLOWLOG subcommand [argument]\n管理 redis 的慢日志")]),e._v(" "),n("p",[e._v("31\tSYNC\n用于复制功能(replication)的内部命令")]),e._v(" "),n("h2",{attrs:{id:"redis-数据备份和恢复"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-数据备份和恢复"}},[e._v("#")]),e._v(" Redis 数据备份和恢复")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("SAVE 命令用于创建当前数据库的备份。 \n")])])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("redis 127.0.0.1:6379> SAVE \n\nOK\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("该命令将在 redis 安装目录中创建dump.rdb文件。")]),e._v(" "),n("h3",{attrs:{id:"恢复数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#恢复数据"}},[e._v("#")]),e._v(" 恢复数据")]),e._v(" "),n("p",[e._v("如果需要恢复数据，只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 CONFIG 命令，如下所示：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('redis 127.0.0.1:6379> CONFIG GET dir\n\n1) "dir"\n2) "/usr/local/redis/bin"\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("h3",{attrs:{id:"bgsave"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bgsave"}},[e._v("#")]),e._v(" Bgsave")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("创建 redis 备份文件也可以使用命令 BGSAVE，该命令在后台执行。\n")])])]),n("p",[e._v("实例")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("127.0.0.1:6379> BGSAVE\n\nBackground saving started\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("h2",{attrs:{id:"安全"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[e._v("#")]),e._v(" 安全")]),e._v(" "),n("p",[e._v("可以配置redis开启密码")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('127.0.0.1:6379> CONFIG get requirepass\n1) "requirepass"\n2) ""\n\n\n默认情况下 requirepass 参数是空的，这就意味着你无需通过密码验证就可以连接到 redis 服务。\n\n你可以通过以下命令来修改该参数：\n\n127.0.0.1:6379> CONFIG set requirepass "runoob"\nOK\n127.0.0.1:6379> CONFIG get requirepass\n1) "requirepass"\n2) "runoob"\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("h2",{attrs:{id:"redis-性能测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-性能测试"}},[e._v("#")]),e._v(" Redis 性能测试")]),e._v(" "),n("p",[e._v("Redis 性能测试是通过同时执行多个命令实现的。")]),e._v(" "),n("p",[e._v("语法\nredis 性能测试的基本命令如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("redis-benchmark [option] [option value]\n")])])]),n("p",[e._v("实例")]),e._v(" "),n("p",[e._v("以下实例同时执行 10000 个请求来检测性能：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ redis-benchmark -n 10000  -q\n\nPING_INLINE: 141043.72 requests per second\nPING_BULK: 142857.14 requests per second\nSET: 141442.72 requests per second\nGET: 145348.83 requests per second\nINCR: 137362.64 requests per second\nLPUSH: 145348.83 requests per second\nLPOP: 146198.83 requests per second\nSADD: 146198.83 requests per second\nSPOP: 149253.73 requests per second\nLPUSH (needed to benchmark LRANGE): 148588.42 requests per second\nLRANGE_100 (first 100 elements): 58411.21 requests per second\nLRANGE_300 (first 300 elements): 21195.42 requests per second\nLRANGE_500 (first 450 elements): 14539.11 requests per second\nLRANGE_600 (first 600 elements): 10504.20 requests per second\nMSET (10 keys): 93283.58 requests per second\nredis 性能测试工具可选参数如下所示：\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br")])]),n("p",[e._v("序号\t选项\t描述\t默认值")]),e._v(" "),n("p",[e._v("1\t-h\t指定服务器主机名\t127.0.0.1")]),e._v(" "),n("p",[e._v("2\t-p\t指定服务器端口\t6379")]),e._v(" "),n("p",[e._v("3\t-s\t指定服务器 socket")]),e._v(" "),n("p",[e._v("4\t-c\t指定并发连接数\t50")]),e._v(" "),n("p",[e._v("5\t-n\t指定请求数\t10000")]),e._v(" "),n("p",[e._v("6\t-d\t以字节的形式指定 SET/GET 值的数据大小\t2")]),e._v(" "),n("p",[e._v("7\t-k\t1=keep alive 0=reconnect\t1")]),e._v(" "),n("p",[e._v("8\t-r\tSET/GET/INCR 使用随机 key, SADD 使用随机值")]),e._v(" "),n("p",[e._v("9\t-P\t通过管道传输 "),n("numreq",[e._v(" 请求\t1")])],1),e._v(" "),n("p",[e._v("10\t-q\t强制退出 redis。仅显示 query/sec 值")]),e._v(" "),n("p",[e._v("11\t--csv\t以 CSV 格式输出")]),e._v(" "),n("p",[e._v("12\t-l\t生成循环，永久执行测试")]),e._v(" "),n("p",[e._v("13\t-t\t仅运行以逗号分隔的测试命令列表。")]),e._v(" "),n("p",[e._v("14\t-I\tIdle 模式。仅打开 N 个 idle 连接并等待。")]),e._v(" "),n("p",[e._v("实例")]),e._v(" "),n("p",[e._v("以下实例我们使用了多个参数来测试 redis 性能：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 10000 -q\n\nSET: 146198.83 requests per second\nLPUSH: 145560.41 requests per second\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("以上实例中主机为 127.0.0.1，端口号为 6379，执行的命令为 set,lpush，请求数为 10000，通过 -q 参数让结果只显示每秒执行的请求数。")]),e._v(" "),n("h2",{attrs:{id:"redis-管道技术"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-管道技术"}},[e._v("#")]),e._v(" Redis 管道技术")]),e._v(" "),n("p",[e._v("Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：")]),e._v(" "),n("ul",[n("li",[e._v("客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。")]),e._v(" "),n("li",[e._v("服务端处理命令，并将结果返回给客户端。")])]),e._v(" "),n("p",[n("strong",[e._v("Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。")])]),e._v(" "),n("p",[e._v("实例\n查看 redis 管道，只需要启动 redis 实例并输入以下命令：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\n\n$(echo -en "PING\\r\\n SET runoobkey redis\\r\\nGET runoobkey\\r\\nINCR visitor\\r\\nINCR visitor\\r\\nINCR visitor\\r\\n"; sleep 10) | nc localhost 6379\n\n+PONG\n+OK\nredis\n:1\n:2\n:3\n\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("以上实例中我们通过使用 PING 命令查看redis服务是否可用， 之后我们设置了 runoobkey 的值为 redis，然后我们获取 runoobkey 的值并使得 visitor 自增 3 次。")]),e._v(" "),n("p",[e._v("在返回的结果中我们可以看到这些命令一次性向 redis 服务提交，并最终一次性读取所有服务端的响应")]),e._v(" "),n("h3",{attrs:{id:"管道技术的优势"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#管道技术的优势"}},[e._v("#")]),e._v(" 管道技术的优势")]),e._v(" "),n("p",[e._v("管道技术最显著的优势是提高了 redis 服务的性能。")]),e._v(" "),n("p",[e._v("一些测试数据\n在下面的测试中，我们将使用Redis的Ruby客户端，支持管道技术特性，测试管道技术对速度的提升效果。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('require \'rubygems\' \nrequire \'redis\'\ndef bench(descr) \nstart = Time.now \nyield \nputs "#{descr} #{Time.now-start} seconds" \nend\ndef without_pipelining \nr = Redis.new \n10000.times { \n    r.ping \n} \nend\ndef with_pipelining \nr = Redis.new \nr.pipelined { \n    10000.times { \n        r.ping \n    } \n} \nend\nbench("without pipelining") { \n    without_pipelining \n} \nbench("with pipelining") { \n    with_pipelining \n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br")])]),n("p",[e._v("从处于局域网中的Mac OS X系统上执行上面这个简单脚本的数据表明，开启了管道操作后，往返时延已经被改善得相当低了。")]),e._v(" "),n("p",[e._v("without pipelining 1.185238 seconds")]),e._v(" "),n("p",[e._v("with pipelining 0.250783 seconds")]),e._v(" "),n("p",[e._v("如你所见，开启管道后，我们的速度效率提升了5倍。")]),e._v(" "),n("h2",{attrs:{id:"redis-分区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-分区"}},[e._v("#")]),e._v(" Redis 分区")])])}),[],!1,null,null,null);s.default=a.exports}}]);